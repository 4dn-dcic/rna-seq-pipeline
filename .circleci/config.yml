# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    machine:
      # specify the version you desire here
      image: circleci/classic:201708-01

    working_directory: ~/rna-seq-pipeline

    steps:
      - checkout
      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #    - v1-dependencies-{{ checksum "requirements.txt" }}
      #    # fallback to using the latest cache if no exact match is found
      #    - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            wget -N -c https://github.com/broadinstitute/cromwell/releases/download/34/cromwell-34.jar
      #- save_cache:
      #    paths:
      #      - ./venv
      #    key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: unittests
          command: |
            python --version
      - run:
          name: build image
          command: |
            echo "Building image."
            export TAG=quay.io/encode-dcc/rna-seq-pipeline:${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG .
            docker push $TAG
            docker logout
      #- store_artifacts:
      #    path: test-reports
      #    destination: test-reports
workflows:
  version: 2
  build_workflow:
    jobs:
      - build:
        filters:
          branches:
            only: PIP-360_circleci
